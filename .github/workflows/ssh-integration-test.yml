name: SSH Tunneling Integration Test

on:
  push:
    branches: [ main, ssh-tunneling-docs ]
    paths: 
      - 'src/toolfront/ssh.py'
      - 'src/toolfront/models/connection.py'
      - 'tests/integration/test_ssh_tunneling.py'
      - 'docker-compose.integration.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/toolfront/ssh.py' 
      - 'src/toolfront/models/connection.py'
      - 'tests/integration/test_ssh_tunneling.py'
      - 'docker-compose.integration.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  ssh-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install sshpass (for testing)
      run: sudo apt-get update && sudo apt-get install -y sshpass netcat-openbsd
      
    - name: Clean up Docker environment
      run: |
        docker system prune -f
        docker volume prune -f
        
    - name: Build and start integration test environment
      run: |
        docker compose -f docker-compose.integration.yml up -d --build
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to start..."
        sleep 15
        
        echo "Checking SSH bastion health..."
        timeout 60 bash -c 'until docker compose -f docker-compose.integration.yml exec -T ssh-bastion nc -z localhost 22; do echo "Waiting for SSH..."; sleep 3; done'
        
        echo "Checking PostgreSQL health..."
        timeout 60 bash -c 'until docker compose -f docker-compose.integration.yml exec -T postgres-private pg_isready -U testuser -d testdb; do echo "Waiting for PostgreSQL..."; sleep 3; done'
        
        echo "All services are healthy!"
        
    - name: Show service status
      run: |
        echo "=== Service Status ==="
        docker compose -f docker-compose.integration.yml ps
        echo "======================"
        
    - name: Run SSH tunneling integration tests
      run: |
        echo "ðŸ§ª Running SSH tunneling integration tests..."
        docker compose -f docker-compose.integration.yml run --rm test-runner uv run python -m pytest tests/integration/ -v -m "docker_compose"
        
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== SSH Bastion Logs ==="
        docker compose -f docker-compose.integration.yml logs ssh-bastion
        echo "=== PostgreSQL Logs ==="
        docker compose -f docker-compose.integration.yml logs postgres-private
        echo "=== Test Runner Logs ==="
        docker compose -f docker-compose.integration.yml logs test-runner
        
    - name: Clean up
      if: always()
      run: |
        docker compose -f docker-compose.integration.yml down -v --remove-orphans
        docker system prune -f